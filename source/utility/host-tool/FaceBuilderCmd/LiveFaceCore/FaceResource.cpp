// FaceResource.cpp: implementation of the FaceResource class.
//
//////////////////////////////////////////////////////////////////////

#include <stdlib.h>
#include <stdio.h>
#include <string.h>
#include "error.h"

#include "FaceResource.h"

#ifdef _DEBUG
#undef THIS_FILE
static char THIS_FILE[] = __FILE__;
#define new DEBUG_NEW
#endif

//////////////////////////////////////////////////////////////////////
// Construction/Destruction
//////////////////////////////////////////////////////////////////////

int IsFileExist(char *pathname);

//------------------------------------------------------------------------------------------------------------
//
// 函数说明
//
//
// 参数说明
//
//
// 返回值
//
//
// 其他
//    无
//
//------------------------------------------------------------------------------------------------------------
FaceResource::FaceResource()
{
    m_resAccess_if = NULL;

    memset(m_ResourceFile, 0, MAX_PATH);

    m_hRes = NULL;
}

//------------------------------------------------------------------------------------------------------------
//
// 函数说明
//
//
// 参数说明
//
//
// 返回值
//
//
// 其他
//    无
//
//------------------------------------------------------------------------------------------------------------
FaceResource::FaceResource(char *resource_path)
{
    m_resAccess_if = NULL;

    memset(m_ResourceFile, 0, MAX_PATH);

    m_hRes = NULL;

    strcpy(m_ResourceFile, resource_path);
}
//------------------------------------------------------------------------------------------------------------
//
// 函数说明
//
//
// 参数说明
//
//
// 返回值
//
//
// 其他
//    无
//
//------------------------------------------------------------------------------------------------------------
FaceResource::~FaceResource()
{
    CloseResource();

    m_resAccess_if = NULL;
}


//------------------------------------------------------------------------------------------------------------
//
// 函数说明
//
//
// 参数说明
//
//
// 返回值
//
//
// 其他
//    无
//
//------------------------------------------------------------------------------------------------------------

u32 FaceResource::SetInterface(void *__if, const char *plug_guid)
{
    u32 ret = OK;

    if (NULL == __if)
    {
        Msg("FaceResource::SetInterface __if == null");
        return __LINE__;
    }

    if (GUID_LEN != strlen(plug_guid))
    {
        Msg("FaceResource::SetInterface strlen not valid");
        return __LINE__;
    }

    if (0 == strncmp(plug_guid, RESACCESS_PLUGIN_TYPE, GUID_LEN))
    {
        m_resAccess_if = (RESACCESS_IF *)__if;
    }

    return ret;
}


//------------------------------------------------------------------------------------------------------------
//
// 函数说明
//
//
// 参数说明
//
//
// 返回值
//
//
// 其他
//    无
//
//------------------------------------------------------------------------------------------------------------
u32 FaceResource::OpenResource(char *resource_path)
{
    u32 ret = OK;

    if (NULL == resource_path)
    {
        return __LINE__;
    }

    if (NULL == m_resAccess_if)
    {
        printf("Please Set res interface first !\n");
        return __LINE__;
    }

    //--------------------------------------------------------------------------
    //
    //--------------------------------------------------------------------------
    //Msg("FaceResource::OpenResource : call CloseResource");
    //CloseResource();

    //--------------------------------------------------------------------------
    //
    //--------------------------------------------------------------------------
    m_hRes = m_resAccess_if->OpenRes(resource_path, 0);
    if (NULL == m_hRes)
    {
        return __LINE__;
    }


    return ret;
}
//------------------------------------------------------------------------------------------------------------
//
// 函数说明
//
//
// 参数说明
//
//
// 返回值
//
//
// 其他
//    无
//
//------------------------------------------------------------------------------------------------------------
u32 FaceResource::OpenResource()
{
    //Msg("FaceResource::OpenResource()");
    if (0 == strlen(m_ResourceFile))
    {
        return __LINE__;
    }

    if (OK != IsFileExist(m_ResourceFile))
    {
        return __LINE__;
    }

    return OpenResource(m_ResourceFile);
}

//------------------------------------------------------------------------------------------------------------
//
// 函数说明
//
//
// 参数说明
//
//
// 返回值
//
//
// 其他
//    无
//
//------------------------------------------------------------------------------------------------------------
u32 FaceResource::CloseResource()
{
    u32 ret = OK;

    if (NULL == m_resAccess_if)
    {
        Msg("Err:FaceResource::CloseResource()\n");
        return __LINE__;
    }

    if (NULL != m_hRes)
    {
        m_resAccess_if->CloseRes(m_hRes);
        m_hRes = NULL;
    }

    return ret;
}


//------------------------------------------------------------------------------------------------------------
//
// 函数说明
//
//
// 参数说明
//
//
// 返回值
//     0 表示资源找不到
//
// 其他
//    无
//
//------------------------------------------------------------------------------------------------------------

u32 FaceResource::GetResSize(u16 StyleID, u16 ID)
{
    if (NULL == m_resAccess_if)
    {
        Msg("GetResSize: m_resAccess_if NULL");
        return 0;
    }

    if (NULL == m_hRes)
    {
        Msg("GetResSize: m_hRes NULL");
        return 0;
    }

    return m_resAccess_if->GetResSize(m_hRes, StyleID, ID);
}


//------------------------------------------------------------------------------------------------------------
//
// 函数说明
//
//
// 参数说明
//
//
// 返回值
//
//
// 其他
//    无
//
//------------------------------------------------------------------------------------------------------------

u32 FaceResource::GetRes(u16 StyleID, u16 ID, void *Buffer, u32 Length)
{
    if (NULL == m_resAccess_if)
    {
        return __LINE__;
    }

    if (NULL == m_hRes)
    {
        return __LINE__;
    }

    return m_resAccess_if->GetRes(m_hRes, StyleID, ID, Buffer, Length);
}


//------------------------------------------------------------------------------------------------------------
//
// 函数说明
//
//
// 参数说明
//
//
// 返回值
//
//
// 其他
//    无
//
//------------------------------------------------------------------------------------------------------------

u32 FaceResource::SaveResAsFile(u16 ID, char *filepath)
{
    u32 ret = OK;
    u32 size = 0;
    u32 bufsize = 0;
    u16 StyleID = 0;
    FILE *fp = NULL;
    u8 *buffer = NULL;


    if (NULL == filepath)
    {
        return __LINE__;
    }

    if (0 == ID)
    {
        return __LINE__;
    }

    //--------------------------------------------------------------------------
    //
    //--------------------------------------------------------------------------
    size = GetResSize(StyleID, ID);
    if (0 == size)
    {
        Msg("Err: %s %d", __FILE__, __LINE__);
        ret = __LINE__;
        goto Error_End;
    }

    //--------------------------------------------------------------------------
    //
    //--------------------------------------------------------------------------
    bufsize = size;
    //bufsize = 16 * ((size + 15) / 16);
    buffer = (u8 *) malloc(bufsize);
    if (NULL == buffer)
    {
        ret = __LINE__;
        goto Error_End;
    }

    //--------------------------------------------------------------------------
    //
    //--------------------------------------------------------------------------
    ret = GetRes(StyleID, ID, buffer, bufsize);
    if (OK != ret)
    {
        Msg("Err: %s %d", __FILE__, __LINE__);
        goto Error_End;
    }

    //--------------------------------------------------------------------------
    //
    //--------------------------------------------------------------------------
    if (OK == IsFileExist(filepath))
    {
        remove(filepath);
    }
    //--------------------------------------------------------------------------
    //
    //--------------------------------------------------------------------------
    fp = fopen(filepath, "wb+");
    if (NULL == fp)
    {
        Msg("Err: %s %d", __FILE__, __LINE__);
        ret = __LINE__;
        goto Error_End;
    }
    fwrite(buffer, size, 1, fp);

    fclose(fp);
    fp = NULL;

    //--------------------------------------------------------------------------
    //
    //--------------------------------------------------------------------------
    free(buffer);
    buffer = NULL;

    return ret;


    //--------------------------------------------------------------------------
    //
    //--------------------------------------------------------------------------
Error_End:
    if (NULL != fp)
    {
        fclose(fp);
        fp = NULL;
    }

    if (NULL != buffer)
    {
        free(buffer);
        buffer = NULL;
    }

    return ret;
}

//------------------------------------------------------------------------------------------------------------
//
// 函数说明
//
//
// 参数说明
//
//
// 返回值
//
//
// 其他
//    无
//
//------------------------------------------------------------------------------------------------------------
